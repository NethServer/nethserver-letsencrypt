#!/usr/bin/perl

use esmith::ConfigDB;
use esmith::HostsDB;
use File::stat;
use esmith::event;
use Getopt::Std;

my $cdb = esmith::ConfigDB->open();
my $ddb = esmith::HostsDB->open_ro();

my $crtdir = "/etc/letsencrypt/";
my $crtdir_backup = "/etc/letsencrypt.autobackup/";
my $lebin = "/usr/bin/certbot";
my $config = "";
my $verbose = 0;
my $testing = 0;
my $force = 0;
our $mail = '';
our $modified = 0;
# Certificate for FQDN
our @domains = ();

$SIG{INT}  = \&restore;
$SIG{TERM} = \&restore;

sub restore {
    if ( -d $crtdir_backup) {
        # restore backup cert dir
        if ($verbose) {
            print "Restoring $crtdir ...\n";
        }
        system("rm -rf $crtdir");
        system("mv $crtdir_backup $crtdir");
    }
}

sub renew {
    my $domains = shift;

    my $opts = " certonly --webroot --webroot-path /var/www/html/ --text --non-interactive --agree-tos ";
    if (!$mail) {
        $opts .= " --register-unsafely-without-email "
    } else {
        $opts .= " --email $mail "
    }

    # file paths
    my $crt = $crtdir.${$domains}[0]."/live/cert.pem";
    
    # read the date of certificate link before renewal
    my $tmp = stat($crt);
    my $before = defined($tmp) ? $tmp->mtime : 0;
    
    my $cmd = "$lebin $opts";

    foreach (@$domains) {
        $cmd .= " -d $_ ";
    }

    if ($force) {
        $cmd .= " --force-renewal ";
    }

    if ($testing) {
        $cmd .= " --test-cert ";
    }

    if (!$verbose) {
        $cmd .= " --quiet >/dev/null";
    } else {
        $cmd .= " -v ";
        print $cmd."\n";
    }
    my $ret = system($cmd);

    if ($testing) {
        restore();
    }

    # read the date of certificate link after renewal
    $tmp = stat($crt);
    my $after = defined($tmp) ? $tmp->mtime : 0;

    if ($before != $after) {
        $modified++;
    }

    exit $ret>>8;
}

sub help {
    print "Usage: $0 [-h] [-f] [-d] [-v] [-t]\n";
    print "\nOptions:\n";
    print "  -h : show this help\n";
    print "  -f : force certificate renew\n";
    print "  -d : comma-separated list of domains,\n";
    print "       if not set read from config db pki[LetsEncryptDomains]\n";
    print "  -v : verbose\n";
    print "  -t : testing, enable staging CA\n";
}

my %options=();
getopts("hvtfd:", \%options);

# make sure certificate dir exists
if ( ! -d $crtdir) {
    mkdir($crtdir);
}

if (defined $options{h}) {
    help();
    exit 0;
}

if (defined $options{v}) {
    $verbose = 1;
}

if (defined $options{f}) {
    $force = 1;
}

if (defined $options{t}) {
    $testing = 1;

    # copy existing cert dir into a temporary one
    system("mv $crtdir $crtdir_backup");
}

if (defined $options{d}) {
    foreach (split(',',$options{d})) {
        push(@domains, $_);
    }
}

$mail = $cdb->get_prop('pki','LetsEncryptMail') || '';

# read domains from pki prop
if (!@domains) {
    my $le_domains =  $cdb->get_prop('pki','LetsEncryptDomains') || '';
    if ($le_domains) {
        foreach (split(',',$le_domains)) {
            push(@domains, $_);
        }
    }
}

if (!@domains) {
    exit 0;
}

# Renew certificate for all domains
renew(\@domains);

if ($modified > 0) {
   if ($verbose) {
      print "Executing certificate-update event...\n";
   }
   if(esmith::event::event_signal('certificate-update') == 0) {
       exit 1;
   }
}

exit 0;
