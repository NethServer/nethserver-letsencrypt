#!/usr/bin/perl

use esmith::ConfigDB;
use esmith::HostsDB;
use File::stat;
use esmith::event;
use Getopt::Std;

my $cdb = esmith::ConfigDB->open();
my $ddb = esmith::HostsDB->open_ro();

my $crtdir = "/etc/letsencrypt.sh/certs/";
my $lebin = "/usr/bin/dehydrated";
my $config = "/etc/letsencrypt.sh/config.sh";
my $verbose = 0;
my $testing = 0;
my $force = 0;
our $modified = 0;

sub renew {
    my $domains = shift;

    my $opts = "--accept-terms --cron  --config $config ";

    # file paths
    my $crt = $crtdir.${$domains}[0]."/cert.pem";
    
    # read the date of certificate link before renewal
    my $tmp = stat($crt);
    my $before = defined($tmp) ? $tmp->mtime : 0;
    
    my $cmd = "$lebin $opts";

    foreach (@$domains) {
        $cmd .= " -d $_ ";
    }

    if ($force) {
        $cmd .= " -x ";
    }

    if (!$verbose) {
        $cmd .= " >/dev/null";
    } else {
        print $cmd."\n";
    }
    system($cmd);

    if ($testing) {
        exit $?>>8;
    }

    # read the date of certificate link after renewal
    $tmp = stat($crt);
    my $after = defined($tmp) ? $tmp->mtime : 0;

    if ($before != $after) {
        $modified++;
        return 1;
    }
    return 0;
}

sub help {
    print "Usage: $0 [-h] [-f] [-v] [-t]\n";
    print "\nOptions:\n";
    print "  -h : show this help\n";
    print "  -f : force certificate renew\n";
    print "  -v : verbose\n";
    print "  -t : testing, enable staging CA\n";
}

my %options=();
getopts("hvtf", \%options);

if (defined $options{h}) {
    help();
    exit 0;
}

if (defined $options{v}) {
    $verbose = 1;
}

if (defined $options{f}) {
    $force = 1;
}

if (defined $options{t}) {
    use File::Temp;
    use File::Copy;
    $testing = 1;

    my $dirname = File::Temp::tempdir( CLEANUP => 1 );
    my $filename = 'report.txt';
    open(my $fh, '>', $dirname."/config.sh") or die "Could not open file '$dirname/config.sh' $!";
    print $fh "CHALLENGETYPE=http-01\n";
    print $fh "CA=https://acme-staging.api.letsencrypt.org/directory\n";
    print $fh "WELLKNOWN=/var/www/html/.well-known/acme-challenge/\n";
    print $fh "BASEDIR=$dirname\n";
    close $fh;

    $config = $dirname."/config.sh";
}



my $lets_status = $cdb->get_prop('pki','LetsEncrypt') || 'disabled';
if ($lets_status ne 'enabled') {
    if ($verbose) {
       print "LetsEncrypt is disabled, exiting.\n";
       print "\nTo enable LetsEncrypt, execute:\n";
       print "  config setprop pki LetsEncrypt enabled\n";
    }
    exit 0;
}

# Certificate for FQDN
my @domains = ();
my $fqdn = $cdb->get_value('SystemName').".".$cdb->get_value('DomainName');
push(@domains, $fqdn);

foreach ($ddb->get_all_by_prop('type' => 'self')) {
    my $le = $_->prop('LetsEncrypt') || 'disabled';
    if ($le eq 'enabled') {
        push(@domains, $_->key);
    }
}

if (renew(\@domains)) {
    $cdb->set_prop('pki','ChainFile', $crtdir.$fqdn."/chain.pem");
    $cdb->set_prop('pki','CrtFile', $crtdir.$fqdn."/cert.pem");
    $cdb->set_prop('pki','KeyFile', $crtdir.$fqdn."/privkey.pem");
}



if ($modified > 0) {
   if ($verbose) {
      print "Executing certificate-update event...\n";
   }
   if(esmith::event::event_signal('certificate-update') == 0) {
       exit 1; 
   }
}

exit 0;
